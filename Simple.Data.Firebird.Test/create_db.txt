-- Type maping tests
CREATE TABLE TYPES_NUMBERS_NATURAL (
    ID INTEGER NOT NULL,
    TEST_INTEGER INTEGER,
    TEST_SMALLINT SMALLINT,
    TEST_BIGINT BIGINT);

ALTER TABLE TYPES_NUMBERS_NATURAL
ADD CONSTRAINT TYPES_NUMBERS_NATURAL
PRIMARY KEY (ID);

CREATE TABLE TYPES_NUMBERS_REAL (
    ID INTEGER NOT NULL,
    TEST_FLOAT FLOAT,
    TEST_DOUBLE DOUBLE PRECISION,
    TEST_NUMERIC_S NUMERIC(3,2),
    TEST_NUMERIC NUMERIC(7,7),
    TEST_NUMERIC_B NUMERIC(18,8),
    TEST_DECIMAL_S DECIMAL(3,2),
    TEST_DECIMAL DECIMAL(7,7),
    TEST_DECIMAL_B DECIMAL(18,8));

ALTER TABLE TYPES_NUMBERS_REAL
ADD CONSTRAINT PK_TYPES_NUMBERS_REAL
PRIMARY KEY (ID);

CREATE TABLE TYPES_DATETIME (
    ID INTEGER NOT NULL,
    TEST_DATE DATE,
    TEST_TIME TIME,
    TEST_TIMESTAMP TIMESTAMP);

ALTER TABLE TYPES_DATETIME
ADD CONSTRAINT PK_TYPES_DATETIME
PRIMARY KEY (ID);

CREATE TABLE TYPES_TEXT (
    ID INTEGER NOT NULL,
    TEST_CHAR CHAR(10) CHARACTER SET UTF8 COLLATE UNICODE,
    TEST_VARCHAR VARCHAR(10) CHARACTER SET UTF8 COLLATE UNICODE);

ALTER TABLE TYPES_TEXT
ADD CONSTRAINT PK_TYPES_TEXT
PRIMARY KEY (ID);

CREATE TABLE TYPES_BLOB (
    ID INTEGER NOT NULL,
    TEST_BLOB_BINARY BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TEST_BLOB_TEXT BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET UTF8 COLLATE UNICODE);

ALTER TABLE TYPES_BLOB
ADD CONSTRAINT PK_TYPES_BLOB
PRIMARY KEY (ID);



INSERT INTO TYPES_NUMBERS_NATURAL (ID, TEST_INTEGER, TEST_SMALLINT, TEST_BIGINT) VALUES (0, 0, 0, 0);
INSERT INTO TYPES_NUMBERS_NATURAL (ID, TEST_INTEGER, TEST_SMALLINT, TEST_BIGINT) VALUES (1, NULL, NULL, NULL);
INSERT INTO TYPES_NUMBERS_NATURAL (ID, TEST_INTEGER, TEST_SMALLINT, TEST_BIGINT) VALUES (2, 2147483647, 32767, 9223372036854775807);



INSERT INTO TYPES_NUMBERS_REAL (ID, TEST_FLOAT, TEST_DOUBLE, TEST_NUMERIC_S, TEST_NUMERIC, TEST_NUMERIC_B, TEST_DECIMAL_S, TEST_DECIMAL, TEST_DECIMAL_B) VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0);
INSERT INTO TYPES_NUMBERS_REAL (ID, TEST_FLOAT, TEST_DOUBLE, TEST_NUMERIC_S, TEST_NUMERIC, TEST_NUMERIC_B, TEST_DECIMAL_S, TEST_DECIMAL, TEST_DECIMAL_B) VALUES (1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO TYPES_NUMBERS_REAL (ID, TEST_FLOAT, TEST_DOUBLE, TEST_NUMERIC_S, TEST_NUMERIC, TEST_NUMERIC_B, TEST_DECIMAL_S, TEST_DECIMAL, TEST_DECIMAL_B) VALUES (2, 3.39999995214436E38, 1.7E308, 327.67, 214.7483647, 92233720368.54775807, 999.99, 214.7483647, 92233720368.54775807);
INSERT INTO TYPES_NUMBERS_REAL (ID, TEST_FLOAT, TEST_DOUBLE, TEST_NUMERIC_S, TEST_NUMERIC, TEST_NUMERIC_B, TEST_DECIMAL_S, TEST_DECIMAL, TEST_DECIMAL_B) VALUES (3, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1);


INSERT INTO TYPES_DATETIME (ID, TEST_DATE, TEST_TIME, TEST_TIMESTAMP) VALUES (0, '0001-01-01', '00:00:00', '0001-01-01 00:00:00');
INSERT INTO TYPES_DATETIME (ID, TEST_DATE, TEST_TIME, TEST_TIMESTAMP) VALUES (1, '9999-12-31', '23:59:59', '9999-12-31 23:59:59');
INSERT INTO TYPES_DATETIME (ID, TEST_DATE, TEST_TIME, TEST_TIMESTAMP) VALUES (2, null, null, null);


INSERT INTO TYPES_TEXT (ID, TEST_CHAR, TEST_VARCHAR) VALUES (0, '123456789', '123456789');
INSERT INTO TYPES_TEXT (ID, TEST_CHAR, TEST_VARCHAR) VALUES (1, NULL, NULL);

INSERT INTO TYPES_BLOB (ID, TEST_BLOB_BINARY, TEST_BLOB_TEXT) VALUES (0, NULL, NULL);
INSERT INTO TYPES_BLOB (ID, TEST_BLOB_BINARY, TEST_BLOB_TEXT) VALUES (1, NULL, '1234567890');
INSERT INTO TYPES_BLOB (ID, TEST_BLOB_BINARY) VALUES (2, 1);


-- Find filtering tests

CREATE DOMAIN money AS
DECIMAL(18, 4);

CREATE TABLE users (
  id integer NOT NULL,
  name varchar(100) NOT NULL,
  password varchar(100) NOT NULL,
  age integer NOT NULL
);

ALTER TABLE users
  ADD CONSTRAINT pk_users
  PRIMARY KEY (id);

CREATE TABLE persons (
  id integer NOT NULL,
  name varchar(100) NOT NULL,
  surname varchar(100) NOT NULL,
  middle_name varchar(100),
  age integer NOT NULL
);

ALTER TABLE persons
  ADD CONSTRAINT pk_persons
  PRIMARY KEY (id);
  
CREATE TABLE customers
(
  id integer NOT NULL,
  name varchar(100) NOT NULL,
  address varchar(200)
);

ALTER TABLE customers
  ADD CONSTRAINT pk_customers
  PRIMARY KEY (id);
      
    
CREATE TABLE orders (
  id integer NOT NULL,
  order_date timestamp NOT NULL,
  customer_id integer NOT NULL
);

ALTER TABLE orders
  ADD CONSTRAINT pk_orders
  PRIMARY KEY (id);

ALTER TABLE orders
  ADD CONSTRAINT fk_orders_customers_customer_id
  FOREIGN KEY (customer_id) REFERENCES customers (id)
  ON DELETE NO ACTION ON UPDATE NO ACTION;
      
    
CREATE TABLE items (
  id integer NOT NULL,
  name varchar(100) NOT NULL,
  price money NOT NULL
);

ALTER TABLE items
  ADD CONSTRAINT pk_items
  PRIMARY KEY (id);
    
CREATE TABLE order_items (
  id integer NOT NULL,
  order_id integer NOT NULL,
  item_id integer NOT NULL,
  quantity integer  NOT NULL
);

ALTER TABLE order_items
  ADD CONSTRAINT pk_order_items
  PRIMARY KEY (id);

ALTER TABLE order_items
  ADD CONSTRAINT fk_order_items_item_id
  FOREIGN KEY (item_id) REFERENCES items (id)
  ON DELETE NO ACTION ON UPDATE NO ACTION;
  
ALTER TABLE order_items
  ADD CONSTRAINT fk_order_items_order_id
  FOREIGN KEY (order_id) REFERENCES orders (id)
  ON DELETE NO ACTION ON UPDATE NO ACTION;

CREATE VIEW view_customers AS
  SELECT name, address, id
  FROM customers;


CREATE GENERATOR GEN_CUSTOMERS_ID;
CREATE GENERATOR GEN_PERSONS_ID;
CREATE GENERATOR GEN_USERS_ID;
CREATE GENERATOR GEN_ORDERS_ID;
CREATE GENERATOR GEN_ITEMS_ID;
CREATE GENERATOR GEN_ORDER_ITEMS_ID;

SET TERM ^ ;


/* Trigger: CUSTOMERS_BI */
CREATE OR ALTER TRIGGER CUSTOMERS_BI FOR CUSTOMERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_customers_id,1);
end
^

CREATE OR ALTER TRIGGER USERS_BI FOR USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_users_id,1);
end
^

CREATE OR ALTER TRIGGER PERSONS_BI FOR PERSONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_persons_id,1);
end
^

CREATE OR ALTER TRIGGER ORDERS_BI FOR ORDERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_orders_id,1);
end
^

CREATE OR ALTER TRIGGER ITEMS_BI FOR ITEMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_items_id,1);
end
^

CREATE OR ALTER TRIGGER ORDER_ITEMS_BI FOR ORDER_ITEMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_order_items_id,1);
end
^

SET TERM ; ^      

INSERT INTO users (name, password, age) VALUES ('Bob', 'Bob', 32);
INSERT INTO users (name, password, age) VALUES ('Charlie', 'Charlie', 49);
INSERT INTO users (name, password, age) VALUES ('Dave', 'Dave', 12);

INSERT INTO customers (name, address) VALUES ('Test', '100 Road');

INSERT INTO orders (order_date, customer_id) VALUES ('2010-10-10 00:00:00.000', (select max(id) from customers));

INSERT INTO items (name, price) VALUES ('Widget', '4.5000');

INSERT INTO order_items (order_id, item_id, quantity) VALUES ((select max(id) from orders), (select max(id) from items), 10);

---------- Procedures -----------

SET TERM ^ ;

CREATE OR ALTER PROCEDURE TEST_NO_RETURN
as
begin

end
^

CREATE OR ALTER PROCEDURE TEST_NO_RETURN_INPUT_PARAMETER (
    id integer not null
)
as
begin

end
^

CREATE TABLE TEST_NO_RETURN_OPT_INPUT_VALS (
    ID    INTEGER NOT NULL,
    OPT   INTEGER,
    OPT1  INTEGER,
    OPT2  INTEGER
)^

CREATE OR ALTER PROCEDURE TEST_NO_RETURN_OPT_INPUT_PARAMS (
    id integer,
	opt integer = null,
	opt1 integer = 1,
	opt2 integer = 2
)
as
begin
	insert into TEST_NO_RETURN_OPT_INPUT_VALS(id,opt,opt1,opt2) values (:id,:opt,:opt1,:opt2);
end
^

CREATE OR ALTER PROCEDURE TEST_RETURN_NO_INPUT_PARAMS 
returns (
    val integer,
	null_val integer
)
as
begin
	val = 1;
	suspend;
end
^

CREATE OR ALTER PROCEDURE TEST_RETURN_IN_OUT_PARAMS (
	number integer
)
returns (
    val integer
)
as
begin
	val = 1;
	suspend;
	val = 2;
	suspend;
end
^

SET TERM ; ^
